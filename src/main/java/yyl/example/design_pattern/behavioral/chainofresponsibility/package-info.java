/**
 * 在责任链(Chain of Responsibility)模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。<br>
 * 请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。<br>
 */
package yyl.example.design_pattern.behavioral.chainofresponsibility;

// 责任链模式涉及到的角色如下所示：
// 抽象处理者(Handler)角色：定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。
// 具体处理者(ConcreteHandler)角色：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。